/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// manifest.json
var require_manifest = __commonJS({
  "manifest.json"(exports, module2) {
    module2.exports = {
      id: "lazy-plugins",
      name: "Lazy Plugin Loader",
      version: "1.0.5",
      minAppVersion: "1.6.0",
      description: "Load plugins with a delay on startup, so that you can get your app startup down into the sub-second loading time.",
      author: "Alan Grainger",
      authorUrl: "https://github.com/alangrainger",
      fundingUrl: "https://ko-fi.com/alan_",
      isDesktopOnly: false
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LazyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/Settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  shortDelaySeconds: 5,
  longDelaySeconds: 15,
  defaultStartupType: null,
  plugins: {},
  showConsoleLog: false
};
var LoadingMethods = {
  disabled: "\u26D4 Disable plugin",
  instant: "\u26A1 Instant",
  short: "\u231A Short delay",
  long: "\u{1F4A4} Long delay"
};
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.dropdowns = [];
    this.app = app;
    this.lazyPlugin = plugin;
  }
  display() {
    const { containerEl } = this;
    const pluginSettings = this.lazyPlugin.settings.plugins;
    containerEl.empty();
    Object.entries({
      shortDelaySeconds: "Short delay (seconds)",
      longDelaySeconds: "Long delay (seconds)"
    }).forEach(([key, name]) => {
      new import_obsidian.Setting(containerEl).setName(name).addText((text) => text.setValue(this.lazyPlugin.settings[key].toString()).onChange(async (value) => {
        this.lazyPlugin.settings[key] = parseFloat(parseFloat(value).toFixed(3));
        await this.lazyPlugin.saveSettings();
      }));
    });
    new import_obsidian.Setting(containerEl).setName("Global plugin delay settings").setHeading();
    new import_obsidian.Setting(containerEl).setName("Default startup type for new plugins").addDropdown((dropdown) => {
      dropdown.addOption("", "Nothing configured");
      this.addDelayOptions(dropdown);
      dropdown.setValue(this.lazyPlugin.settings.defaultStartupType || "").onChange(async (value) => {
        this.lazyPlugin.settings.defaultStartupType = value || null;
        await this.lazyPlugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Individual plugin delay settings").setHeading();
    new import_obsidian.Setting(containerEl).setName("Set the delay for all plugins at once").addDropdown((dropdown) => {
      dropdown.addOption("", "Set all plugins to be:");
      this.addDelayOptions(dropdown);
      dropdown.onChange(async (value) => {
        this.lazyPlugin.manifests.forEach((plugin) => {
          pluginSettings[plugin.id] = { startupType: value };
        });
        this.dropdowns.forEach((dropdown2) => dropdown2.setValue(value));
        dropdown.setValue("");
        await this.lazyPlugin.saveSettings();
      });
    });
    this.lazyPlugin.manifests.forEach((plugin) => {
      new import_obsidian.Setting(containerEl).setName(plugin.name).setDesc(plugin.description).addDropdown((dropdown) => {
        var _a;
        this.dropdowns.push(dropdown);
        this.addDelayOptions(dropdown);
        dropdown.setValue((_a = pluginSettings == null ? void 0 : pluginSettings[plugin.id]) == null ? void 0 : _a.startupType).onChange(async (value) => {
          await this.lazyPlugin.updatePluginSettings(plugin.id, value);
          this.lazyPlugin.setPluginStartup(plugin.id).then();
        });
      });
    });
  }
  /**
   * Add the dropdown select options for each delay type
   */
  addDelayOptions(el) {
    Object.keys(LoadingMethods).forEach((key) => {
      el.addOption(key, LoadingMethods[key]);
    });
  }
};

// src/main.ts
var lazyPluginId = require_manifest().id;
var LazyPlugin = class extends import_obsidian2.Plugin {
  constructor() {
    super(...arguments);
    this.pendingTimeouts = [];
  }
  async onload() {
    await this.loadSettings();
    this.manifests = Object.values(this.app.plugins.manifests).filter((plugin) => plugin.id !== lazyPluginId).sort((a, b) => a.name.localeCompare(b.name));
    await this.setInitialPluginsConfiguration();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.manifests.forEach((plugin) => this.setPluginStartup(plugin.id));
  }
  /**
   * Configure and load a plugin based on its startup settings.
   * This uses Obsidian's enablePluginAndSave() and disablePluginAndSave() functions
   * to save the configuration state for Obsidian's next start.
   */
  async setPluginStartup(pluginId) {
    var _a, _b, _c, _d;
    const obsidian = this.app.plugins;
    const startupType = (_b = (_a = this.settings.plugins) == null ? void 0 : _a[pluginId]) == null ? void 0 : _b.startupType;
    const isActiveOnStartup = obsidian.enabledPlugins.has(pluginId);
    const isRunning = (_d = (_c = obsidian.plugins) == null ? void 0 : _c[pluginId]) == null ? void 0 : _d._loaded;
    switch (startupType) {
      case "disabled" /* disabled */:
        await obsidian.disablePluginAndSave(pluginId);
        break;
      case "instant" /* instant */:
        if (!isActiveOnStartup && !isRunning)
          await obsidian.enablePluginAndSave(pluginId);
        break;
      case "short" /* short */:
      case "long" /* long */:
        if (isActiveOnStartup) {
          await obsidian.disablePluginAndSave(pluginId);
          await obsidian.enablePlugin(pluginId);
        } else {
          const seconds = startupType === "short" /* short */ ? this.settings.shortDelaySeconds : this.settings.longDelaySeconds;
          const delay = this.manifests.findIndex((x) => x.id === pluginId) * 40;
          const timeout = setTimeout(async () => {
            var _a2, _b2;
            if (!((_b2 = (_a2 = obsidian.plugins) == null ? void 0 : _a2[pluginId]) == null ? void 0 : _b2._loaded)) {
              if (this.settings.showConsoleLog) {
                console.log(`Starting ${pluginId} after a ${startupType} delay`);
              }
              await obsidian.enablePlugin(pluginId);
            }
          }, seconds * 1e3 + delay);
          this.pendingTimeouts.push(timeout);
        }
        break;
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * Set the initial config value for all installed plugins.
   * This will also set the value for any new plugin in the future, depending on what default value
   * is chosen in the Settings page.
   */
  async setInitialPluginsConfiguration() {
    var _a, _b;
    for (const plugin of this.manifests) {
      if (!((_b = (_a = this.settings.plugins) == null ? void 0 : _a[plugin.id]) == null ? void 0 : _b.startupType)) {
        await this.updatePluginSettings(
          plugin.id,
          this.settings.defaultStartupType || (this.app.plugins.enabledPlugins.has(plugin.id) ? "instant" /* instant */ : "disabled" /* disabled */)
        );
      }
    }
  }
  /**
   * Update an individual plugin's configuration and the settings file
   */
  async updatePluginSettings(pluginId, startupType) {
    this.settings.plugins[pluginId] = { startupType };
    await this.saveSettings();
  }
  /**
   * When the Lazy Loader plugin is disabled / deleted from Obsidian, iterate over
   * the configured plugins and re-enable any that are set to be delayed.
   *
   * This will cause a short slowdown as each plugin has to be disabled and then
   * re-enabled to save its new startup state.
   */
  async onunload() {
    this.pendingTimeouts.forEach((timeout) => clearTimeout(timeout));
    for (const [pluginId, data] of Object.entries(this.settings.plugins)) {
      if (data.startupType === "short" /* short */ || data.startupType === "long" /* long */) {
        await this.app.plugins.disablePlugin(pluginId);
        await this.app.plugins.enablePluginAndSave(pluginId);
        console.log(`Set ${pluginId} back to instant start`);
      }
    }
  }
};
